generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Agencies {
  id                                                        String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                                                   String          @unique @db.Uuid
  credit                                                    String?         @db.VarChar
  description                                               String?
  facebook_link                                             String?         @db.VarChar
  twitter_link                                              String?         @db.VarChar
  youtube_link                                              String?         @db.VarChar
  pinterest_link                                            String?         @db.VarChar
  linkedin_link                                             String?         @db.VarChar
  instagram_link                                            String?         @db.VarChar
  whatsup_number                                            String?         @db.VarChar
  service_area                                              String?
  tax_number                                                String?         @db.VarChar
  license_number                                            String?         @db.VarChar
  agency_packages                                           String?         @db.Uuid
  picture                                                   String?         @db.VarChar
  cover                                                     String?         @db.VarChar
  meta_id                                                   String?         @db.Uuid
  is_deleted                                                Boolean         @default(false)
  created_at                                                DateTime?       @default(now()) @db.Timestamp(6)
  updated_at                                                DateTime?       @default(now()) @db.Timestamp(6)
  created_by                                                String?         @db.Uuid
  updated_by                                                String?         @db.Uuid
  agency_packages_agencies_agency_packagesToagency_packages AgencyPackages? @relation("agencies_agency_packagesToagency_packages", fields: [agency_packages], references: [id], onDelete: NoAction, onUpdate: NoAction)
  meta_data                                                 MetaData?       @relation(fields: [meta_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("agencies")
}

model AgencyPackages {
  id                                                 String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                                               String     @unique @db.VarChar
  type                                               AgencyType
  is_deleted                                         Boolean    @default(false)
  created_at                                         DateTime?  @default(now()) @db.Timestamp(6)
  updated_at                                         DateTime?  @default(now()) @db.Timestamp(6)
  created_by                                         String?    @db.Uuid
  updated_by                                         String?    @db.Uuid
  agencies_agencies_agency_packagesToagency_packages Agencies[] @relation("agencies_agency_packagesToagency_packages")

  @@map("agency_packages")
}

model Cities {
  id               String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  state_id         String            @db.Uuid
  name             String            @unique @db.VarChar
  is_deleted       Boolean           @default(false)
  created_at       DateTime?         @default(now()) @db.Timestamp(6)
  updated_at       DateTime?         @default(now()) @db.Timestamp(6)
  created_by       String?           @db.Uuid
  updated_by       String?           @db.Uuid
  states           States            @relation(fields: [state_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "state_foreign_key")
  districts        Districts[]
  property_details PropertyDetails[]

  @@map("cities")
}

model Districts {
  id               String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  city_id          String            @db.Uuid
  name             String            @unique @db.VarChar
  is_deleted       Boolean           @default(false)
  created_at       DateTime?         @default(now()) @db.Timestamp(6)
  updated_at       DateTime?         @default(now()) @db.Timestamp(6)
  created_by       String?           @db.Uuid
  updated_by       String?           @db.Uuid
  cities           Cities            @relation(fields: [city_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "citiy_foreign_key")
  property_details PropertyDetails[]

  @@map("districts")
}

model LangTranslations {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  en_string  String    @db.VarChar
  fr_string  String?   @db.VarChar
  is_deleted Boolean   @default(false)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  created_by String?   @db.Uuid
  updated_by String?   @db.Uuid

  @@map("lang_translations")
}

model MetaData {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String     @db.VarChar
  description String?
  keyword     String?
  is_deleted  Boolean    @default(false)
  created_at  DateTime?  @default(now()) @db.Timestamp(6)
  updated_at  DateTime?  @default(now()) @db.Timestamp(6)
  created_by  String?    @db.Uuid
  updated_by  String?    @db.Uuid
  agencies    Agencies[]

  @@map("meta_data")
}

model PropertyDetails {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String    @db.VarChar
  link_uuid   String    @db.VarChar
  description String
  price       Int
  state_id    String    @db.Uuid
  city_id     String    @db.Uuid
  district_id String    @db.Uuid
  latitude    String    @db.VarChar
  longitude   String    @db.VarChar
  vr_link     String?   @db.VarChar
  picture     String?   @db.VarChar
  video       String?   @db.VarChar
  status      Boolean   @default(false)
  user_id     String    @db.Uuid
  is_deleted  Boolean   @default(false)
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @default(now()) @db.Timestamp(6)
  created_by  String?   @db.Uuid
  updated_by  String?   @db.Uuid
  cities      Cities    @relation(fields: [city_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "city_foreign_key")
  districts   Districts @relation(fields: [district_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "districts_foreign_key")
  states      States    @relation(fields: [state_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "state_foreign_key")

  @@map("property_details")
}

model PropertyMetaDetails {
  id                 String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  property_detail_id String    @db.Uuid
  key                String    @unique @db.VarChar
  value              String    @db.VarChar
  is_deleted         Boolean   @default(false)
  created_at         DateTime? @default(now()) @db.Timestamp(6)
  updated_at         DateTime? @default(now()) @db.Timestamp(6)
  created_by         String?   @db.Uuid
  updated_by         String?   @db.Uuid

  @@map("property_meta_details")
}

model PropertyTypeListings {
  id              String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String             @db.VarChar
  property_option PropertyOptionEnum
  property_cat    String?            @db.Uuid
  icon            String?            @db.VarChar
  is_deleted      Boolean            @default(false)
  created_at      DateTime?          @default(now()) @db.Timestamp(6)
  updated_at      DateTime?          @default(now()) @db.Timestamp(6)
  created_by      String?            @db.Uuid
  updated_by      String?            @db.Uuid

  @@map("property_type_listings")
}

model PropertyTypes {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title      String    @unique @db.VarChar
  is_deleted Boolean   @default(false)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  created_by String?   @db.Uuid
  updated_by String?   @db.Uuid

  @@map("property_types")
}

model Roles {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String    @unique @db.VarChar
  is_deleted   Boolean   @default(false)
  created_date DateTime? @default(now()) @db.Timestamp(6)
  updated_date DateTime? @default(now()) @db.Timestamp(6)
  status       Boolean?  @default(true)
  users        Users[]

  @@map("roles")
}

model Settings {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  key        String    @unique @db.VarChar
  value      String    @db.VarChar
  is_deleted Boolean   @default(false)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  created_by String?   @db.Uuid
  updated_by String?   @db.Uuid

  @@map("settings")
}

model States {
  id               String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String            @unique @db.VarChar
  is_deleted       Boolean           @default(false)
  created_at       DateTime?         @default(now()) @db.Timestamp(6)
  updated_at       DateTime?         @default(now()) @db.Timestamp(6)
  created_by       String?           @db.Uuid
  updated_by       String?           @db.Uuid
  cities           Cities[]
  property_details PropertyDetails[]

  @@map("states")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Users {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  full_name     String    @db.VarChar
  user_name     String    @db.VarChar
  fcm_token     String?   @db.VarChar
  mobile_number String?   @db.VarChar
  password      String?   @db.VarChar
  email_address String    @unique @db.VarChar
  address       String?
  image         String?   @db.VarChar
  is_deleted    Boolean   @default(false)
  created_at    DateTime? @default(now()) @db.Timestamp(6)
  updated_at    DateTime? @default(now()) @db.Timestamp(6)
  role_id       String    @db.Uuid
  status        Boolean?  @default(true)
  roles         Roles     @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "role_foreign_key")

  @@map("users")
}

enum AgencyType {
  AGENCIES
  PROMOTEURS

  @@map("agency_type")
}

enum PropertyOptionEnum {
  NAME
  CHECKBOX

  @@map("property_option_enum")
}

enum LoginType {
  GOOGLE
  FACEBOOK
  NONE

  @@map("login_type")
}

enum Role {
  USER
  ADMIN

  @@map("role")
}
